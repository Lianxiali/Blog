import CrossSectionAnalysis
import numpy as np
logic = CrossSectionAnalysis.CrossSectionAnalysisLogic()
centerline = getNode("Centerline curve (0)")
segmentation = getNode("Segmentation")
logic.setInputCenterlineNode(centerline)
logic.setLumenSurface(segmentation, "Segment_1")
outputTable = slicer.mrmlScene.AddNewNodeByClass("vtkMRMLTableNode", "centerlineTable")
logic.outputTableNode = outputTable
logic.coordinateSystemColumnRAS = False
logic.run()
numberOfControlPoints = centerline.GetNumberOfControlPoints()
pt = [0.0, 0.0, 0.0]
section_data_file = open(r"/not_backed_up/lianxia/simulation/openfoam_run/KIDNEY/pressure_driven_fistula/crossSectionData/section_data.txt", "w")
section_data_file.write(f"no\tx (mm)\ty (mm)\tz(mm)\tnx(-)\tny(-)\tnz(-)\tarea(mm^2)\tdiameter(mm)\n")
for i in range(numberOfControlPoints):
    centerline.GetNthControlPointPositionWorld(i, pt)
    pointId = centerline.GetCurveWorld().FindPoint(pt)
    crossSectionPolyData = logic.computeCrossSectionPolydata(pointId)
    model = slicer.modules.models.logic().AddModel(crossSectionPolyData)
    
    # get the normal vector the center point
    mesh = model.GetMesh()
    cell = mesh.GetCell(0)

    p0 = cell.GetPoints().GetPoint(0)
    p1 = cell.GetPoints().GetPoint(1)
    p2 = cell.GetPoints().GetPoint(2)
    #print(vtk.vtkTriangle().TriangleArea(p0,p1,p2))
    n=[0.0,0.0,0.0]
    # negative sign to change RAS (slicer) to LPS (paraview)    
    vtk.vtkTriangle().ComputeNormal(p0,p1,p2,n)
    #n = -1*n # does not work

    # get cross-sectional area
    #tri_converter = vtk.vtkTriangleFilter()
    #tri_converter.SetInputDataObject(model.GetMesh())
    #tri_converter.Update()
    #Mass = vtk.vtkMassProperties() 
    #Mass.SetInputData(tri_converter.GetOutput()) 
    #Mass.Update() 
    #area=Mass.GetSurfaceArea()
    #volume=Mass.GetVolume()
    area = logic.getCrossSectionArea(pointId)

    d = np.sqrt(4*area/(np.pi))
    # convert from RAS to LPS coordiante system by negating the first two coordiantes
    # negate the 3rd coordiante of normal vector to be consistant with paraview (it is equivalent to negating the first 2)
    section_data_file.write(f'{i:3}\t{-pt[0]:20.14}\t{-pt[1]:20.14}\t{pt[2]:20.14}\t{n[0]:20.14}\t{n[1]:20.14}\t{-n[2]:20.14}\t{area:20.14} \t{d:20.14}\n')
    
    model.SetName(f'Section{i:02}')

    
    filename = os.path.basename(model.GetName())
    filepath = r'/not_backed_up/lianxia/simulation/openfoam_run/KIDNEY/pressure_driven_fistula/crossSectionData/STL/' + filename + ".stl"
    slicer.util.exportNode(model, filepath, {"useCompression": 0})    
    
section_data_file.close()    


